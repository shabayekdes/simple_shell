#ifndef SHELL_H
#define SHELL_H

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/stat.h>
#include <limits.h>
#include <fcntl.h>
#include <errno.h>

#define BUFFER_SIZE 1024
#define FLUSH_BUFFER -1

extern char **environ;

/**
 * struct var_list - singly linked list
 * @num: number of field
 * @str: string
 * @next: points to next node
 */
typedef struct var_list
{
	int num;
	char *str;
	struct var_list *next;
} var_t;

/**
 * struct esh_data - information data about esh data structure
 *@esh_name: shell filename
 *@buffer: the address of pointer to buffer
 *@buffer_type: print ||, && ;
 *@arg: arguments
 *@argv: array of strings generated by  arg
 *@path: path of the current command
 *@line_count: error count
 *@err_num: error of  exit
 *@flag: count lines of the input
 *@env: a local copy of environ
 *@environ: a copy of environ
 *@status: the status of the last execute command
 */
typedef struct esh_data
{
	char *esh_name;
	char **buffer;
	int buffer_type;
	char *arg;
	char **argv;
	char *path;
	unsigned int line_count;
	int err_num;
	int flag;
	var_t *env;
	char **environ;
	int status;
} esh_t;

/**
 *struct builtin - contains a custom builtin command
 *@type: the builtin command
 *@func: builtin function
 */
typedef struct builtin
{
	char *type;
	int (*func)(esh_t *);
} builtin_t;

int check_builtin(esh_t *);
void execute_command(esh_t *);
char *dup_chars(char *, int, int);
int _strlen(char *);
char *starts_with(const char *, const char *);
char *_strcat(char *, char *);
char *_strcpy(char *, char *);
char *_strdup(const char *);
int _strcmp(char *, char *);
void _puts(char *);
int _putchar(char);
char *_strchr(char *, char);
char **_split_str(char *ss, char *meter);
int is_delimiter(char ch, char *dlm);
void free_strings(char **);
int safely_free_pointer(void **);
int _atoi(char *);
void print_error(esh_t *, char *);
int print_decimal(int);
char *convert_number(long int, int);
void remove_comments(char *);
int esh_exit(esh_t *);
int esh_cd(esh_t *);
ssize_t read_line(esh_t *);
void sigintHandler(int);
void init_esh(esh_t *, char **);
void reset_esh(esh_t *);
void prompt(void);
char *_getenv(esh_t *, const char *);
int esh_env(esh_t *);
char **get_environ(esh_t *);
var_t *add_node_end(var_t **, const char *, int);
void free_var_list(var_t **);
size_t list_len(const var_t *);
char **list_to_strings(var_t *);
var_t *node_starts_with(var_t *, char *, char);
int detect_chain_delimiter(esh_t *, char *, size_t *);
void handle_chain(esh_t *, char *, size_t *, size_t, size_t);
int replace_vars(esh_t *);

#endif
